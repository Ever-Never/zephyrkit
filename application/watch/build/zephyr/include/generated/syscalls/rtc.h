
/* auto-generated by gen_syscalls.py, don't edit */
#ifndef Z_INCLUDE_SYSCALLS_RTC_H
#define Z_INCLUDE_SYSCALLS_RTC_H


#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <syscall.h>

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic push
#endif

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_counter_set_value(const struct device * dev, uint32_t ticks);
static inline int counter_set_value(const struct device * dev, uint32_t ticks)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&ticks, K_SYSCALL_COUNTER_SET_VALUE);
	}
#endif
	compiler_barrier();
	return z_impl_counter_set_value(dev, ticks);
}


extern int z_impl_counter_set_alarm_wk_rpt(const struct device * dev, uint8_t chan_id, const struct counter_alarm_wk_rpt_cfg * alarm_cfg);
static inline int counter_set_alarm_wk_rpt(const struct device * dev, uint8_t chan_id, const struct counter_alarm_wk_rpt_cfg * alarm_cfg)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&chan_id, *(uintptr_t *)&alarm_cfg, K_SYSCALL_COUNTER_SET_ALARM_WK_RPT);
	}
#endif
	compiler_barrier();
	return z_impl_counter_set_alarm_wk_rpt(dev, chan_id, alarm_cfg);
}


#ifdef __cplusplus
}
#endif

#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)
#pragma GCC diagnostic pop
#endif

#endif
#endif /* include guard */
